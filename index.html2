<!DOCTYPE html>
<html>

<head>
    <script async src="https://ga.jspm.io/npm:es-module-shims@2.6.2/dist/es-module-shims.js"></script>
    <script type="importmap">
    {
      "imports": {
        "react": "https://esm.sh/react@19.2.0",
        "react/": "https://esm.sh/react@19.2.0/",
        "react-dom": "https://esm.sh/react-dom@19.2.0",
        "react-dom/": "https://esm.sh/react-dom@19.2.0/",
        "react-is": "https://esm.sh/react-is@19.2.0",
        "react-is/": "https://esm.sh/react-is@19.2.0/",
        "recharts": "https://esm.sh/recharts@3.3.0?external=react,react-dom,react-is",
        "recharts/": "https://esm.sh/recharts@3.3.0&external=react,react-dom,react-is/",
        "lucid-chart": "https://esm.sh/lucid-chart@latest?external=react,react-dom,react-is",
        "lucid-chart/": "https://esm.sh/lucid-chart@latest&external=react,react-dom,react-is/",

        "@/components/ui/card": "http://127.0.0.1:7001/lib.js"
      }
    }
  </script>
    <script src="https://unpkg.com/@babel/standalone@7.26.0/babel.min.js"></script>
</head>

<body>
    <div id="root"></div>

    <script>
        // function makeImportRewriter() {
        //     const map = new Map([
        //         ['react', `https://esm.sh/react@19.2.0`],
        //         ['react/jsx-runtime', `https://esm.sh/react@19.2.0/jsx-runtime`],
        //         ['react-dom', `https://esm.sh/react-dom@19.2.0`],
        //         ['react-dom/client', `https://esm.sh/react-dom@19.2.0/client`],
        //         // chart libs
        //         ['recharts', `https://esm.sh/recharts@latest`],
        //         ['lucid-chart', `https://esm.sh/lucid-chart@latest`],
        //     ]);

        //     return function importRewriter() {
        //         return {
        //             visitor: {
        //                 ImportDeclaration(path) {
        //                     const from = path.node.source && path.node.source.value;
        //                     if (!from) return;
        //                     if (map.has(from)) {
        //                         path.node.source.value = map.get(from);
        //                         return;
        //                     }
        //                     // support subpath imports, e.g. "pkg/sub/module"
        //                     for (const [key, url] of map.entries()) {
        //                         if (from.startsWith(key + '/')) {
        //                             path.node.source.value = from.replace(key, url);
        //                             break;
        //                         }
        //                     }
        //                 }
        //             }
        //         };
        //     };
        // }

        function transformReactToEsm(code) {
            const result = Babel.transform(code, {
                filename: '_.jsx',
                presets: [
                    ['react', { runtime: 'automatic', importSource: `https://esm.sh/react@19.2.0` }],
                ],
                // plugins: [makeImportRewriter()],
                sourceType: 'module',
            });


            return result.code;
        }
    </script>

    <script type="module">
        import { createRoot } from 'react-dom/client'
        const root = createRoot(document.getElementById('root'))

        window.rendering = async (textCode) => {
            const parsedCode = transformReactToEsm(textCode)
            console.log('parsedCode:\n', parsedCode)

            const blob = new Blob([parsedCode], { type: "text/javascript" });
            const url = URL.createObjectURL(blob);
            const module = await importShim(url);

            console.log(module)

            root.render(module.default())

            // const script = document.createElement('script');
            // script.type = 'module';
            // script.textContent = parsedCode;
            // document.body.appendChild(script);
        }
    </script>

</body>

</html>